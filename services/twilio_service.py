import os
from twilio.rest import Client
from typing import Optional

class TwilioService:
    """Service for sending SMS notifications via Twilio"""
    
    def __init__(self):
        self.account_sid = os.getenv("TWILIO_ACCOUNT_SID")
        self.auth_token = os.getenv("TWILIO_AUTH_TOKEN")
        self.phone_number = os.getenv("TWILIO_PHONE_NUMBER")
        
        if not all([self.account_sid, self.auth_token, self.phone_number]):
            print("⚠️ Twilio credentials not complete. SMS functionality will be limited.")
            self.client = None
        else:
            try:
                self.client = Client(self.account_sid, self.auth_token)
                print("✅ Twilio service initialized")
            except Exception as e:
                print(f"❌ Twilio initialization failed: {e}")
                self.client = None
    
    def send_sms(self, to_phone_number: str, message: str) -> bool:
        """Send SMS message to phone number"""
        if not self.client:
            print("❌ Twilio client not available")
            return False
        
        try:
            # Ensure phone number is in international format
            if not to_phone_number.startswith('+'):
                # Assume Indian number if no country code
                if to_phone_number.startswith('91'):
                    to_phone_number = '+' + to_phone_number
                elif len(to_phone_number) == 10:
                    to_phone_number = '+91' + to_phone_number
                else:
                    to_phone_number = '+91' + to_phone_number
            
            # Send SMS
            sms_message = self.client.messages.create(
                body=message,
                from_=self.phone_number,
                to=to_phone_number
            )
            
            print(f"✅ SMS sent successfully. SID: {sms_message.sid}")
            return True
            
        except Exception as e:
            print(f"❌ Failed to send SMS: {e}")
            return False
    
    def send_medication_reminder(self, phone_number: str, medicine_name: str, 
                               dosage: str, patient_name: str = None) -> bool:
        """Send medication reminder SMS"""
        
        # Personalized reminder message
        if patient_name:
            message = f"🏥 Health Reminder for {patient_name}\n\n"
        else:
            message = "🏥 Medication Reminder\n\n"
        
        message += f"⏰ Time for your medicine:\n"
        message += f"💊 {medicine_name}\n"
        message += f"📏 Dosage: {dosage}\n\n"
        message += f"Please take your medication as prescribed by your doctor.\n\n"
        message += f"Stay healthy! 💙\n"
        message += f"- AI Health Assistant"
        
        return self.send_sms(phone_number, message)
    
    def send_emergency_alert(self, phone_number: str, patient_name: str, 
                           symptoms: str, urgency_level: str) -> bool:
        """Send emergency health alert SMS"""
        
        urgency_messages = {
            'emergency': '🚨 EMERGENCY ALERT',
            'urgent': '⚠️ URGENT HEALTH ALERT',
            'moderate': '📞 HEALTH NOTIFICATION',
            'mild': '💡 HEALTH REMINDER'
        }
        
        header = urgency_messages.get(urgency_level, '📱 HEALTH ALERT')
        
        message = f"{header}\n\n"
        
        if patient_name:
            message += f"Patient: {patient_name}\n"
        
        message += f"Symptoms reported: {symptoms}\n\n"
        
        if urgency_level == 'emergency':
            message += f"🚨 SEEK IMMEDIATE MEDICAL ATTENTION\n"
            message += f"Call emergency services: 108/102\n"
        elif urgency_level == 'urgent':
            message += f"⚠️ Consult doctor within 24 hours\n"
        else:
            message += f"Consider consulting healthcare provider\n"
        
        message += f"\nThis alert was generated by AI Health Assistant based on symptom analysis."
        
        return self.send_sms(phone_number, message)
    
    def send_prescription_notification(self, phone_number: str, patient_name: str,
                                     medicines_count: int) -> bool:
        """Send notification about scanned prescription"""
        
        message = f"📄 Prescription Processed\n\n"
        
        if patient_name:
            message += f"Patient: {patient_name}\n"
        
        message += f"✅ Successfully extracted {medicines_count} medicine(s) from your prescription\n\n"
        message += f"💊 Medication reminders have been set up\n"
        message += f"📱 You'll receive SMS reminders as scheduled\n\n"
        message += f"Access your health records anytime through the AI Health Assistant app.\n\n"
        message += f"Stay healthy! 💙"
        
        return self.send_sms(phone_number, message)
    
    def send_health_tips(self, phone_number: str, tip_category: str = "general") -> bool:
        """Send daily health tips SMS"""
        
        health_tips = {
            "general": [
                "💧 Drink at least 8 glasses of water daily for better health!",
                "🚶‍♂️ Take a 30-minute walk daily to boost your energy and mood!",
                "🥗 Include more fruits and vegetables in your diet for better nutrition!",
                "😴 Get 7-8 hours of quality sleep for optimal health and recovery!",
                "🧘‍♀️ Practice deep breathing for 5 minutes to reduce stress!"
            ],
            "diabetes": [
                "🍎 Monitor your blood sugar regularly and maintain a food diary!",
                "🏃‍♀️ Regular exercise helps control blood sugar levels naturally!",
                "💊 Take your diabetes medication exactly as prescribed by your doctor!"
            ],
            "hypertension": [
                "🧂 Reduce salt intake to help lower your blood pressure!",
                "🍌 Include potassium-rich foods like bananas in your diet!",
                "📈 Monitor your blood pressure regularly at home!"
            ]
        }
        
        tips = health_tips.get(tip_category, health_tips["general"])
        import random
        selected_tip = random.choice(tips)
        
        message = f"🏥 Daily Health Tip\n\n"
        message += selected_tip
        message += f"\n\nSmall steps lead to big changes! 💙\n"
        message += f"- AI Health Assistant"
        
        return self.send_sms(phone_number, message)
    
    def validate_phone_number(self, phone_number: str) -> bool:
        """Validate phone number format"""
        if not phone_number:
            return False
        
        # Remove all non-digit characters
        cleaned_number = ''.join(filter(str.isdigit, phone_number))
        
        # Check if it's a valid Indian mobile number
        if len(cleaned_number) == 10 and cleaned_number[0] in '6789':
            return True
        elif len(cleaned_number) == 12 and cleaned_number.startswith('91') and cleaned_number[2] in '6789':
            return True
        elif len(cleaned_number) == 13 and cleaned_number.startswith('91') and cleaned_number[2] in '6789':
            return True
        
        return False
    
    def format_phone_number(self, phone_number: str) -> Optional[str]:
        """Format phone number to international format"""
        if not self.validate_phone_number(phone_number):
            return None
        
        # Remove all non-digit characters
        cleaned_number = ''.join(filter(str.isdigit, phone_number))
        
        # Format to international
        if len(cleaned_number) == 10:
            return f"+91{cleaned_number}"
        elif len(cleaned_number) == 12 and cleaned_number.startswith('91'):
            return f"+{cleaned_number}"
        elif len(cleaned_number) == 13 and cleaned_number.startswith('91'):
            return f"+{cleaned_number}"
        
        return None
